#!/usr/bin/env python

from mva.analysis import Analysis
from mva.samples import Higgs
from mva.categories import CATEGORIES
from mva.defaults import TARGET_REGION
from mva.plotting import draw_ratio
from mva import CACHE_DIR
from rootpy.plotting import Hist
from root_numpy import fill_hist
import os
import pickle

# begin configuration
modes = [
    'gg',
    'VBF',
]
ggf_weight = True
pileup_weight = True
# end configuration

higgs = Higgs(
    2012, mass=125, modes=modes,
    ggf_weight=ggf_weight,
    pileup_weight=pileup_weight,
    ntuple_path='ntuples_hh/prod_v29',
    student='hhskim_BCH')
higgs_bch = Higgs(
    2012, mass=125, modes=modes,
    ggf_weight=ggf_weight,
    pileup_weight=pileup_weight,
    ntuple_path='ntuples_hh/prod_v29',
    student='hhskim_BCH',
    suffix='_BCH.mc12b')

print "default raw number of events", higgs.events(weighted=False)[1].value
print "BCH-fixed sample raw number of events", higgs_bch.events(weighted=False)[1].value

FAIL_BCH_TIGHT = {
    'vbf': 'tau1_BCHTight||tau2_BCHTight||jet1_BCHTight||jet2_BCHTight',
    'boosted': 'tau1_BCHTight||tau2_BCHTight',
    'rest': 'tau1_BCHTight||tau2_BCHTight',
}

analysis = Analysis(2012)

UNCERT = {}

for cattype in ('mva_all', 'cuts'):
    for category in CATEGORIES[cattype]:

        if 'vbf' in category.name:
            bch_category = 'vbf'
        elif 'boosted' in category.name:
            bch_category = 'boosted'
        elif category.name == 'rest':
            bch_category = 'rest'
        else:
            raise ValueError('unable to handle category {0}'.format(
                category.name))

        if cattype == 'mva_all' and not category.analysis_control:
            # get the BDTs
            clf = analysis.get_clf(category, mass=125, load=True, transform=True)
            # get scores
            scores, weights = higgs.scores(
                clf, category, TARGET_REGION,
                systematics=False)['NOMINAL']
            scores_bch, weights_bch = higgs_bch.scores(
                clf, category, TARGET_REGION,
                systematics=False)['NOMINAL']
            # get scores range
            min_score = min(scores.min(), scores_bch.min())
            max_score = max(scores.max(), scores_bch.max())
            # histograms
            hist = Hist(20, min_score - 1E-5, max_score + 1E-5, title='H 125 GeV')
            hist_bch = Hist(20, min_score - 1E-5, max_score + 1E-5, title='H 125 GeV with BCH fix')
            # fill histograms with scores
            fill_hist(hist, scores, weights)
            fill_hist(hist_bch, scores_bch, weights_bch)
            # plot the scores
            plot = draw_ratio(hist, hist_bch, 'BDT Score', category, normalize=False)
            for fmt in ('eps', 'png'):
                plot.SaveAs('bch_compare_{0}.{1}'.format(category.name, fmt))

        print
        print "[N(r5470, no cuts) - N(default, no cuts)] / N(default, no cuts)"
        diff = (higgs_bch.events(category, TARGET_REGION)[1].value -
                higgs.events(category, TARGET_REGION)[1].value) / higgs.events(category, TARGET_REGION)[1].value
        print category.name, diff
        print

        print "[N(r5470, fail tight BCH-cut) - N(default, fail tight BCH-cut)] / N(default, no cuts)"
        diff = (higgs_bch.events(category, TARGET_REGION, cuts=FAIL_BCH_TIGHT[bch_category])[1].value -
                higgs.events(category, TARGET_REGION, cuts=FAIL_BCH_TIGHT[bch_category])[1].value) / higgs.events(category, TARGET_REGION)[1].value
        print category.name, diff
        print

        UNCERT[category.name] = abs(diff)

        bch = higgs_bch.events(category, TARGET_REGION)[1].value
        bch_fail = higgs_bch.events(category,
            TARGET_REGION, cuts=FAIL_BCH_TIGHT[bch_category])[1].value

        default = higgs.events(category, TARGET_REGION)[1].value
        default_fail = higgs.events(category,
            TARGET_REGION, cuts=FAIL_BCH_TIGHT[bch_category])[1].value

        print "BCH-fixed sample events: ", bch
        print "BCH-fixed sample events failing tight: ", bch_fail

        print "default sample events: ", default
        print "default sample events failing tight: ", default_fail

        print "N(r5470, fail tight BCH-cut) / N(r5470, no cuts)", bch_fail / bch
        print "N(default, fail tight BCH-cut) / N(default, no cuts)", default_fail / default

        print '-' * 20

with open(os.path.join(CACHE_DIR, 'bch_cleaning.cache'), 'w') as file:
    pickle.dump(UNCERT, file)

for name in sorted(UNCERT.keys()):
    value = UNCERT[name]
    print "{0}: {1:.2f}%".format(name, abs(value * 100))
