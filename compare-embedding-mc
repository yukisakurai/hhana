#!/usr/bin/env python

from mva.cmd import get_parser

args = get_parser(actions=False).parse_args()

from mva.analysis import get_analysis

analysis = get_analysis(args)

from rootpy.plotting import Canvas, Hist, Legend
from rootpy.plotting.utils import draw
from root_numpy import fill_hist
from ROOT import TLatex

from mva.samples import Embedded_Ztautau, MC_Ztautau
from mva.plotting import format_plot
from mva import MMC_MASS
from mva.variables import VARIABLES, get_range, get_scale, get_units

target_region = args.target_region

eb_ztt = Embedded_Ztautau(year=args.year, systematics=False,
                          fillstyle='hollow', color='black')
eb_ztt.label = 'Embedded {0}'.format(eb_ztt.label)
# emulate embedding treatment on MC Ztautau
mc_ztt = MC_Ztautau(year=args.year, systematics=False, trigger=False,
                    fillstyle='hollow', color='red', linestyle='dashed')
mc_ztt.label = 'MC {0}'.format(mc_ztt.label)

analysis.ztautau = eb_ztt

for category in analysis.iter_categories(
        args.categories, args.controls, names=args.category_names):

    if category.analysis_control:
        continue

    clf = analysis.get_clf(category, mass=125, load=True, transform=True)

    eb_ztt_events = eb_ztt.events(category, target_region)[1].value
    mc_ztt_events = mc_ztt.events(category, target_region)[1].value
    
    # BDT score
    canvas = Canvas()
    hists = []
    for sample in (eb_ztt, mc_ztt):
        # get the scores
        scores, weights = sample.scores(
            clf, category, target_region,
            systematics=False)['NOMINAL']
        hist = Hist(25, -1, 1, drawstyle='hist E0', markersize=0, linewidth=3,
            legendstyle='L', title=sample.label, **sample.hist_decor)
        fill_hist(hist, scores, weights)
        if sample is mc_ztt:
            hist *= eb_ztt_events / mc_ztt_events
        hists.append(hist)
    axes, bounds = draw(hists, pad=canvas, ypadding=(0.25, 0))
    xaxis, yaxis = axes
    leg = Legend(hists, pad=canvas, leftmargin=0.4, margin=0.18, topmargin=0.15, textsize=22)
    leg.Draw()
    format_plot(canvas, template=hists[0], xaxis=xaxis, yaxis=yaxis, xlabel='BDT Score',
                data_info=analysis.data.info,
                left_label=category.label)
    canvas.SaveAs('emb_BDT_{0}_{1}.png'.format(category.name, analysis.year))
    
    # MMC mass
    canvas = Canvas()
    hists = []
    for sample in (eb_ztt, mc_ztt):
        hist = Hist(30, 20, 200, drawstyle='hist E0', markersize=0, linewidth=3,
            legendstyle='L', title=sample.label, **sample.hist_decor)
        sample.draw_array({MMC_MASS: hist}, category, target_region)
        if sample is mc_ztt:
            hist *= eb_ztt_events / mc_ztt_events
        hists.append(hist)
    axes, bounds = draw(hists, pad=canvas, ypadding=(0.25, 0))
    xaxis, yaxis = axes
    leg = Legend(hists, pad=canvas, leftmargin=0.4, margin=0.18, topmargin=0.15, textsize=22)
    leg.Draw()
    format_plot(canvas, template=hists[0], xaxis=xaxis, yaxis=yaxis,
                xlabel=VARIABLES[MMC_MASS]['root'], units='GeV',
                data_info=analysis.data.info,
                left_label=category.label)
    canvas.SaveAs('emb_MMC_{0}_{1}.png'.format(category.name, analysis.year))

    # tau pt
    for field in ('tau1_pt', 'tau2_pt', 'dR_tau1_tau2'):
        info = VARIABLES[field]
        canvas = Canvas()
        hists = []
        for sample in (eb_ztt, mc_ztt):
            hist = Hist(info['bins'], *get_range(field, category), drawstyle='hist E0', markersize=0, linewidth=3,
                legendstyle='L', title=sample.label, **sample.hist_decor)
            sample.draw_array({field: hist}, category, target_region,
                              field_scale={field: get_scale(field)})
            if sample is mc_ztt:
                hist *= eb_ztt_events / mc_ztt_events
            hists.append(hist)
        axes, bounds = draw(hists, pad=canvas, ypadding=(0.25, 0))
        xaxis, yaxis = axes
        leg = Legend(hists, pad=canvas, leftmargin=0.4, margin=0.18, topmargin=0.15, textsize=22)
        leg.Draw()
        format_plot(canvas, template=hists[0], xaxis=xaxis, yaxis=yaxis,
                    xlabel=info['root'], units=get_units(field),
                    data_info=analysis.data.info,
                    left_label=category.label)
        canvas.SaveAs('emb_{0}_{1}_{2}.png'.format(field, category.name, analysis.year))

