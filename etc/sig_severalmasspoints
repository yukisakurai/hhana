#!/usr/bin/env python

# --> python imports
import os
import cPickle as pickle
from multiprocessing import Process,Manager

# --> rootpy imports
from rootpy.io import root_open
from rootpy.plotting import Canvas, get_style

# --> ROOT imports
import ROOT

# --> local imports
from mva import CACHE_DIR,log
from mva.cmd import get_parser
from mva.samples import Higgs
from statstools import get_significance_workspace
from statstools.pvalue_plot import pvalue_plot

# --> Argument parser
parser = get_parser(actions=False)
parser.add_argument('--verbose', action='store_true', default=False)
parser.add_argument('--force-pickle', action='store_true', default=False)
parser.add_argument('--use-fixed-workspace', action='store_true', default=False)
parser.add_argument('workspace_dir')
parser.add_argument('--workspace-basename', default='hh_combination')
args = parser.parse_args()

# --> Add a handle of the all shortcut in the mass-points argument
if args.masses == 'all':
    args.masses = Higgs.MASSES
else:
    args.masses = map(int, args.masses.split(','))


#------------------------------------------------
def get_significance(significances, file, ws, mass):
    with root_open(file) as f:
        if ws not in f:
            f.ls()
        else:
            h = get_significance_workspace(f[ws], 
                                           verbose=args.verbose,
                                           blind=not args.unblind)
            signi = list(h.y())[1]
            log.info('Tested mass: %d, significance = %1.4f' % (mass, signi))
            significances[mass] = signi
    return

#-----------------------------------
def read_significances(significances_file):
    """
    Use the pickle module to extract the
    information stored in the pickle file
    and dump it into a dictionnary.
    -----------
    parameter: pickle file name
    """
    significances = {}
    if os.path.isfile(significances_file):
        log.info("reading significances from %s" % significances_file)
        with open(significances_file) as cached_significances:
            significances = pickle.load(cached_significances)
    return significances

#----------------------------------------------
def write_significances(significances_file, files_list, ws_list, masses_list):
    # -------------------------
    if not files_list:
        raise ValueError("files_list is empty")
    if not ws_list:
        raise ValueError("ws_list is empty")
    if not masses_list:
        raise ValueError("masses_list is empty")

    # -------------------------
    if not isinstance(files_list, (list, tuple)):
        files_list = [files_list]
    if not isinstance(ws_list, (list, tuple)):
        ws_list = [ws_list]
    if not isinstance(masses_list, (list, tuple)):
        masses_list = [masses_list]

    # -------------------------
    # -- Compute the significance of each mass point in parallel
    # -- Use the multiprocessing python module
    manager = Manager()
    significances = manager.dict()
    jobs = []
    for file, ws, mass in zip(files_list, ws_list, masses_list):
        log.info('============================================')
        log.info('File: %s' % file)
        log.info('Workspace: %s' % ws)
        log.info('Tested mass: %d' % mass)
        p = Process(target=get_significance,
                    name='significance_m%d' % mass,
                    args=(significances, file, ws, mass))
        jobs.append(p)
        p.start()
        log.info('%s. Is alive ? %s' % (str(p), str(p.is_alive())) )
    for job in jobs:
        job.join()
    log.info('Write to %s' % significances_file)
    with open(significances_file, 'w') as significances_file:
        pickle.dump(dict(significances), significances_file)



# --------------------------------------------------------
# ------------------ MAIN DRIVER
# --------------------------------------------------------
pickle_file = ('%s_%s.pickle' % (args.workspace_dir, args.workspace_basename))
pickle_file = pickle_file.replace('/', '_')
SIGNIFICANCES_FILE = os.path.join(CACHE_DIR, 'significances', pickle_file)
log.info('Use %s'%SIGNIFICANCES_FILE)
# args.masses = map(int, args.masses.split(','))
log.info ('Mass points tested %s' % str(args.masses))

# --- Create the files/WS/tested mass lists
masses_list = args.masses
ws_list = []
files_list = []
for mass in masses_list:
    file = '%s/%s_%d.root'%(args.workspace_dir, args.workspace_basename, mass)
    ws = 'workspace_%s_%d'%(args.workspace_basename, mass)
    if args.use_fixed_workspace:
        file = '{0}/{1}_{2}/ws_measurement_{1}_{2}.root'.format(args.workspace_dir,args.workspace_basename,mass)
        ws = 'combined'

    files_list.append(file)
    ws_list.append(ws)

# --- Write the significances into the pickle file
# --- do it only if the file does not exist or if the force_pickle argument is called
if os.path.isfile(SIGNIFICANCES_FILE) and not args.force_pickle:
    log.warning('%s already exists, significances are not recomputed'%SIGNIFICANCES_FILE)
else:
    write_significances(SIGNIFICANCES_FILE, files_list, ws_list, masses_list)

# --- plot the significances
significances_dict = read_significances(SIGNIFICANCES_FILE)
pvalues_exp = []
for mass in masses_list :
    pval_temp = ROOT.Math.gaussian_cdf_c(significances_dict[mass])
    pvalues_exp.append(pval_temp)

style = get_style('ATLAS', shape='rect')
# allow space for sigma labels on right
style.SetPadRightMargin(0.05)
style.cd()
c = Canvas()
pvalue_plot(masses_list, pvalues_exp, c, xtitle='m_{H} [GeV]')
for fmt in args.output_formats:
    c.SaveAs('plots/pvalue.%s'%fmt)
