#!/usr/bin/env python

from mva.cmd import get_parser
from mva.analysis import get_analysis
from mva.samples import Higgs
from rootpy.io import root_open
from root_numpy import array2tree
import numpy as np
from numpy.lib import recfunctions

args = get_parser(actions=False).parse_args()
analysis = get_analysis(args)

# create an ntuple containing trees for each sample with classifier scores
# and event weights

with root_open('hhntup.root', 'recreate') as out:
    samples = analysis.backgrounds[:]
    for mass in Higgs.MASS_POINTS:
        signals = analysis.get_signals(mass)
        samples.extend(signals)

    for category in analysis.iter_categories(
            args.categories, args.controls, names=args.category_names):

        if category.analysis_control:
            continue

        clf = analysis.get_clf(category, load=True)
        
        for sample in samples:
            scores_dict = sample.scores(
                clf, category, target_region,
                systematics=args.systematics,
                systematics_components=sample.WORKSPACE_SYSTEMATICS)
            for systematic, (scores, weights) in scores_dict.items():
                rec = sample.merged_records(
                    category, target_region, systematic=systematic)
                output_name = '{0}_category_{1}_systematic_{2}'.format(
                    sample.name,
                    category.name,
                    systematic_name(systematic))
                rec = recfunctions.rec_append_fields(rec,
                    names='score',
                    data=scores,
                    dtypes='f4')
                tree = array2tree(rec, name=output_name)
                tree.Write()


# create an ntuple containing trees for each sample with classifier scores
# and event weights


with root_open('hhntup_theory_uncert.root', 'recreate') as out:

    signals = [
        Higgs(year, mass=125, mode='VBF', systematics=False),
        Higgs(year, mass=125, mode='gg', systematics=False),
        Higgs(year, mass=125, mode='gg',
                sample_pattern='McAtNloJimmy_AUET2CT10_ggH{0:d}_tautau',
                systematics=False),
        Higgs(year, mass=125, mode='gg',
                sample_pattern='PowhegJimmy_AUET2CT10_ggH{0:d}_tautauInclusive',
                systematics=False)
    ]

    for category in analysis.iter_categories(
            args.categories, args.controls, names=args.category_names):

        if category.analysis_control:
            continue
        
        clf = analysis.get_clf(category, load=True)
        
        for sample in signals:
            tree = sample.trees(
                category, target_region)[0]
            scores_dict = sample.scores(
                clf, category, target_region,
                systematics=False)

            scores, weights = scores_dict['NOMINAL']
            
            new_fields = np.c_[scores, weights]
            rec = np.core.records.fromarrays(
                new_fields.transpose(),
                names='score, weight',
                formats='f4, f4')
                
            output_name = '{0}_category_{1}'.format(
                sample.samples[0],
                category.name).replace('.', '_')
            
            tree.SetWeight(1.)

            # add branches to existing tree
            array2tree(rec, tree=tree)

            out.cd()
            outtree = tree.CloneTree(-1, 'fast')
            outtree.SetWeight(1.)
            outtree.Write(output_name)
