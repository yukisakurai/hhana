#!/usr/bin/env python
# python imports
import logging
import os
# ROOT/rootpy imports
from rootpy.plotting import Hist2D, Canvas
from rootpy.plotting.style import get_style, set_style
from rootpy.io import root_open
from ROOT import TLatex
# local imports
from mva import cmd
from mva.analysis import get_analysis
from mva.categories import CATEGORIES

log = logging.getLogger(os.path.basename(__file__))

parser = cmd.analysis_parser(cmd.general_parser())
parser.add_argument('--clf-last-bin', action='store_true', default=False)
args = parser.parse_args()
analysis = get_analysis(args)

target_region = args.target_region
data    = analysis.data
signals = analysis.signals
backgrounds = analysis.backgrounds
categories = 'overlap_yields'
fields = ['RunNumber','EventNumber','mmc1_mass','weight']

def yields_map(yields_dict, sample_name):
    hmap = Hist2D(3, 0, 2, 3, 0, 2)
    hmap.SetBinContent(1, 1, 0.)
    hmap.SetBinContent(1, 2, yields_dict['mva_boosted_and_not_cut'][sample_name])
    hmap.SetBinContent(1, 3, yields_dict['mva_vbf_and_not_cut'][sample_name])
    hmap.SetBinContent(2, 1, yields_dict['cut_boosted_and_not_mva'][sample_name])
    hmap.SetBinContent(2, 2, yields_dict['mva_boosted_and_cut_boosted'][sample_name])
    hmap.SetBinContent(2, 3, yields_dict['mva_vbf_and_cut_boosted'][sample_name])
    hmap.SetBinContent(3, 1, yields_dict['cut_vbf_and_not_mva'][sample_name])
    hmap.SetBinContent(3, 2, yields_dict['mva_boosted_and_cut_vbf'][sample_name])
    hmap.SetBinContent(3, 3, yields_dict['mva_vbf_and_cut_vbf'][sample_name])

    hmap.name = sample_name
    hmap.xaxis.title = 'CBA category'
    hmap.yaxis.title = 'MVA category'
    hmap.xaxis.SetBinLabel(2, 'Boosted')
    hmap.xaxis.SetBinLabel(3, 'VBF')
    hmap.yaxis.SetBinLabel(2, 'Boosted')
    hmap.yaxis.SetBinLabel(3, 'VBF')
    hmap.SetMarkerSize(3)

    c = Canvas()
    hmap.Draw('TEXT0colz')
    lat = TLatex(c.GetLeftMargin()+0.02, 1-c.GetTopMargin()+0.015, sample_name)
    lat.SetNDC(True)
    lat.SetTextSize(25)
    lat.Draw()
    return c, hmap

yields_dict = {}
for category in analysis.iter_categories(categories):
    if category.analysis_control:
        continue
    clf = None
    if hasattr(category, 'clf_category') and args.clf_last_bin:
        clf = analysis.get_clf(
            category.clf_category, load=True,
            mass=125, transform=True)

    yields_info_cat = {}
    rec = data.merged_records(
        category, target_region, fields=fields, 
        clf=clf, include_weight=False)
    if clf:
        scores, _ = data.scores(
            clf, category, target_region)
        cut_score = clf.binning(2012, overflow=1E5)[-2]
        idx = scores >= cut_score
        rec = rec[idx]
    log.info(len(rec))
    yields_info_cat['data'] = len(rec)

    yields_signal = 0.
    for sample in signals+backgrounds:
        rec_sample = sample.merged_records(
            category, target_region,
            fields=fields, clf=clf, include_weight=True)
        if clf:
            sample_scores = sample.scores(
                clf, category, target_region)
            cut_score = clf.binning(2012, overflow=1E5)[-2]
            idx = sample_scores['NOMINAL'][0] >= cut_score
            rec_sample = rec_sample[idx]

        yields_info_cat[sample.name] = rec_sample['weight'].sum()
        if 'Signal' in sample.name:
            yields_signal += rec_sample['weight'].sum()

    yields_info_cat['Signal_all'] = yields_signal
    yields_dict[category.name] = yields_info_cat


style = get_style('ATLAS', shape='rect')
style.SetPadLeftMargin(0.20)
set_style(style)

log.info(yields_dict)

samples = [
    'Signal_V_125', 'Signal_gg_125', 'Signal_VBF_125', 'Signal_all',
    'Ztautau', 'Fakes', 'Others', 'data',
]
if args.clf_last_bin:
    output = 'overlap_last_bdt_bin.root'
else:
    output = 'overlap.root'

with root_open(output, 'recreate'):
    for sample in samples:
        _, h = yields_map(yields_dict, sample)
        h.Write()
        


