#!/usr/bin/env python
"""
This is the main driver script for the analysis
"""
from mva.cmd import get_parser

args = get_parser(actions=False).parse_args()
year = args.year

# stdlib imports
import math

# rootpy imports
from rootpy.io import root_open
from rootpy.plotting import Canvas, Hist, Legend

# local imports
from mva import log, variables, MMC_MASS, plot_dir
from mva.plotting import draw_channel_array, draw_channel, hist_scores, draw_ratio
from mva.classify import histogram_scores
from mva.systematics import get_systematics, parse_systematics
from mva.categories import CATEGORIES
from mva.massregions import MassRegions
from mva.analysis import get_analysis
from mva.defaults import TARGET_REGION

from statstools.histfactory import uniform_channel
from statstools.utils import efficiency_cut


SYSTEMATICS = get_systematics(year)
args.systematics_components = parse_systematics(args.systematics_components)
systematics = SYSTEMATICS if args.systematics else None

mass_regions = MassRegions(
    low=args.low_mass_cut,
    high=args.high_mass_cut,
    high_sideband_in_control=args.high_sideband_in_control,
    mass_window_signal_region=False, #args.no_mmc,
    # not enough events to only train in signal region
    train_signal_region=False)

control_region = mass_regions.control_region
signal_region = mass_regions.signal_region
#signal_region = control_region # for creating control workspaces
train_region = mass_regions.train_region

categories = CATEGORIES[args.categories]
category_names = args.category_names

analysis = get_analysis(args)
target_region = analysis.target_region
region = target_region
output_suffix = analysis.get_suffix()

cat_defs = [args.categories]
if args.categories != 'presel':
    cat_defs.append(args.controls)

UNBLIND = {
    2012: {
        'vbf': 3,
        'boosted': 1},
    2011: {
        'vbf': 2,
        'boosted': 2}
}


def plot_bdt(category, workspace_binning=True):
    # create BDT validation plots
    clf = analysis.get_clf(category, load=True, mass=125, transform=True)
    suffix = clf.output_suffix

    if workspace_binning:
        bins = clf.binning(analysis.year)
        suffix += '_workspace_binning'
        unblind_bins = UNBLIND[year][category.name]
    else:
        bins = 10
        unblind_bins = 0.5
    if args.unblind:
        suffix += '_unblind'

    signal_scale=20.
    region = TARGET_REGION

    """
    # plot data with BDTs swapped and in normal order
    clf_normal = analysis.get_clf(category, load=True, swap=False)
    clf_swap = analysis.get_clf(category, load=True, swap=True)
    scores, _ = clf_normal.classify(analysis.data, category, target_region)
    scores_swap, _ = clf_swap.classify(analysis.data, category, target_region)
    # sanity
    assert(scores.shape[0] == scores_swap.shape[0])
    min_data_score = min(scores.min(), scores_swap.min()) - 1e-5
    max_data_score = max(scores.max(), scores_swap.max()) + 1e-5

    if workspace_binning:
        h = Hist(bins, title='BDTs in normal order')
    else:
        h = Hist(bins, min_data_score, max_data_score, title='BDTs in normal order')
    h_swap = h.Clone(color='red', markerstyle='o', title='BDTs swapped')
    h.fill_array(scores)
    h_swap.fill_array(scores_swap)
    # no overflow
    assert(h.overflow() == 0)
    assert(h.underflow() == 0)
    assert(h_swap.overflow() == 0)
    assert(h_swap.underflow() == 0)
    # sanity
    assert(h.integral() == h_swap.integral())
    fig = draw_ratio(h, h_swap,
                     field='BDT Score', category=category,
                     logy=True, normalize=False)
    fig.SaveAs('data_consistency_{0}{1}.png'.format(category.name, suffix))
    """

    ########################################################################
    # show the background model and data in the mass sideband control region
    log.info("plotting classifier output in the mass sideband control region ...")
    log.info(control_region)

    _, channel = analysis.clf_channels(clf,
        category, region, cuts=control_region,
        mass=125,
        mode='combined',
        bins=bins,
        systematics=systematics,
        unblind=True,
        no_signal_fixes=True)

    # prefit
    draw_channel(channel,
        category=category,
        plot_label='Sideband CR',
        data_info=str(analysis.data.info),
        output_name='event_bdt_score_control' + suffix,
        name='BDT score',
        systematics=systematics,
        output_formats=args.output_formats,
        ypadding=(0.4, 0.),
        log_ypadding=(0.5, 0.1),
        #range=(-1, 1),
        signal_scale=signal_scale,
        signal_on_top=False,
        show_ratio=True,
        output_dir=plot_dir('bdt'))

    """
    #######################################################################
    # deta control region
    log.info("plotting classifier output in the deta > 1.5 control region ...")

    _, channel = analysis.clf_channels(clf,
        category.control('deta'), region, cuts=signal_region,
        mass=125,
        mode='combined',
        bins=bins,
        systematics=systematics,
        unblind=True,
        no_signal_fixes=True)

    # prefit
    draw_channel(channel,
        category=category,
        plot_label='#Delta#eta CR',
        data_info=str(analysis.data.info),
        output_name='event_bdt_score_deta_control' + suffix,
        name='BDT score',
        systematics=systematics,
        output_formats=args.output_formats,
        ypadding=(0.5, 0.),
        log_ypadding=(0.55, 0.1),
        #range=(-1, 1),
        signal_scale=signal_scale,
        signal_on_top=False,
        show_ratio=True,
        output_dir=plot_dir('bdt'))

    ##########################################################################
    # show the background model and 125 GeV signal in the fakes control region
    log.info("plotting classifier output in the fakes control region ...")

    for region_label, fakes_region in (
            ('Non-isolated OS', 'OS_NONISOL'),
            ('Isolated non-OS', 'nOS_ISOL'),
            ('Non-isolated non-OS', 'nOS_NONISOL')):
        orig_qcd_scale = analysis.qcd.scale
        data_events = analysis.data.events(
            category, fakes_region, cuts=signal_region)[1].value
        ztt_events = analysis.ztautau.events(
            category, fakes_region, cuts=signal_region)[1].value
        others_events = analysis.others.events(
            category, fakes_region, cuts=signal_region)[1].value
        fakes_events = analysis.qcd.events(
            category, fakes_region, cuts=signal_region)[1].value
        sf = (data_events - (ztt_events + others_events)) / fakes_events
        analysis.qcd.scale *= sf

        scores, channel = analysis.clf_channels(clf,
            category, fakes_region, cuts=signal_region,
            mass=125,
            mode='combined',
            systematics=systematics,
            bins=8 if not workspace_binning else bins,
            unblind=True,
            no_signal_fixes=True)

        # revert fakes scale
        analysis.qcd.scale = orig_qcd_scale

        draw_channel(
            channel,
            category=category,
            plot_label='{0}'.format(region_label),
            signal_scale=signal_scale,
            signal_on_top=False,
            #fill_signal=True if args.unblind else False,
            data_info=str(analysis.data.info),
            output_name='event_bdt_score_{0}_fakes_region'.format(fakes_region.lower()) + suffix,
            name='BDT score',
            ypadding=(0.4, 0.),
            log_ypadding=(0.5, 0.1),
            #range=(-1, 1),
            systematics=systematics,
            output_formats=args.output_formats,
            show_ratio=True,
            output_dir=plot_dir('bdt'))
    """

    ###################################################################
    # show the background model and 125 GeV signal in the signal region
    log.info("plotting classifier output in the signal region ...")

    scores, channel = analysis.clf_channels(clf,
        category, region, cuts=signal_region,
        mass=125,
        mode='combined',
        systematics=systematics,
        bins=bins,
        unblind=args.unblind or unblind_bins,
        no_signal_fixes=True)

    bkg_scores = scores.bkg_scores
    sig_scores = scores.all_sig_scores[125]
    min_score = scores.min_score
    max_score = scores.max_score

    draw_channel(
        channel,
        category=category,
        plot_label=category.plot_label,
        #plot_label='Mass Signal Region' if signal_region else None,
        signal_scale=1.,
        signal_on_top=True,
        #fill_signal=True if args.unblind else False,
        data_info=str(analysis.data.info),
        output_name='event_bdt_score_signal_region' + suffix,
        name='BDT score',
        ypadding=(0.4, 0.),
        log_ypadding=(0.5, 0.1),
        #range=(-1, 1),
        systematics=systematics,
        output_formats=args.output_formats,
        show_ratio=True,
        output_dir=plot_dir('bdt'))


def plot_weighted_mass(category):

    clf = analysis.get_clf(category, load=True, mass=125, transform=True)
    clf_bins = clf.binning(analysis.year, overflow=1E5)

    scores = analysis.get_scores(
        clf, category, region,
        cuts=signal_region,
        masses=[125],
        mode='combined',
        systematics=False,
        unblind=True)

    bkg_scores = scores.bkg_scores
    sig_scores = scores.all_sig_scores[125]
    min_score = scores.min_score
    max_score = scores.max_score

    # constant binning
    #bkg_score_hist = Hist(40, min_score, max_score)
    # workspace binning
    bkg_score_hist = Hist(clf_bins)

    hist_scores(bkg_score_hist, bkg_scores)
    _bkg = bkg_score_hist.Clone()
    bkg_score_hist /= bkg_score_hist.integral()

    # constant binning
    #sig_score_hist = Hist(40, min_score, max_score)
    # workspace binning
    sig_score_hist = Hist(clf_bins)

    hist_scores(sig_score_hist, sig_scores)
    _sig = sig_score_hist.Clone()
    sig_score_hist /= sig_score_hist.integral()

    sob_hist = (1 + _sig / _bkg)
    _log = math.log
    for bin in sob_hist.bins(overflow=True):
        bin.value = _log(bin.value)
    log.info(str(list(sob_hist.y())))

    """
    ###############################################################
    log.info("plotting mmc weighted by background BDT distribution")

    draw_channel_array(
        analysis,
        variables.VARIABLES,
        plots=[MMC_MASS],
        mass=125,
        mode='combined',
        signal_scale=50,
        category=category,
        region=region,
        systematics=systematics,
        weight_hist=bkg_score_hist,
        clf=clf,
        output_suffix="_reweighted_bkg" + clf.output_suffix,
        cuts=signal_region,
        output_formats=args.output_formats,
        unblind=True,
        poisson_errors=False,
        output_dir=plot_dir('weighted_mass'))

    ###############################################################
    log.info("plotting mmc weighted by signal BDT distribution")

    draw_channel_array(
        analysis,
        variables.VARIABLES,
        plots=[MMC_MASS],
        mass=125,
        mode='combined',
        signal_scale=1,
        category=category,
        region=region,
        systematics=systematics,
        weight_hist=sig_score_hist,
        clf=clf,
        output_suffix="_reweighted_sig" + clf.output_suffix,
        cuts=signal_region,
        output_formats=args.output_formats,
        unblind=args.unblind,
        poisson_errors=False,
        output_dir=plot_dir('weighted_mass'))
    """

    ###############################################################
    log.info("plotting mmc weighted by S / B")

    field_channel, figs = draw_channel_array(
        analysis,
        variables.VARIABLES,
        plots=[MMC_MASS],
        templates={MMC_MASS: Hist(15, 50, 200)},
        mass=125,
        #mass=[125, 150],
        #scale_125=True,
        mode='combined',
        signal_linestyles=['dashed', 'dotted'],
        signal_scale=1,
        stack_signal=False,
        signal_on_top=True,
        #signal_colour_map=cm.spring,
        separate_legends=True,
        ylabel='ln(1+S/B) Weighted Events',
        ypadding=(0.2, 0),
        category=category,
        region=region,
        systematics=systematics,
        weight_hist=sob_hist,
        clf=clf,
        output_suffix="_reweighted_sob" + clf.output_suffix,
        cuts=signal_region,
        output_formats=args.output_formats,
        unblind=True,
        poisson_errors=False,
        #bootstrap_data=analysis,
        output_dir=plot_dir('weighted_mass'))

    channel = field_channel[MMC_MASS]
    with root_open('weighted_mass.root', 'update') as f:
        for s in channel.samples:
            s.hist.Write()
        channel.data.hist.Write()


for category in analysis.iter_categories(*cat_defs, names=args.category_names):

    if category.analysis_control:
        continue

    for workspace_binning in (True, False):
        plot_bdt(category, workspace_binning=workspace_binning)
    continue

    #plot_weighted_mass(category)
    #continue

    """
    ###############################################################
    log.info("plotting mmc")

    draw_channel_array(
        analysis,
        variables.VARIABLES,
        plots=[MMC_MASS],
        #plot_label=category.plot_label,
        mass=125,
        mode='combined',
        plot_label='Signal Region',
        signal_scale=signal_scale if not args.unblind else 1,
        signal_on_top=True if args.unblind else False,
        #fill_signal=True if args.unblind else False,
        category=category,
        region=region,
        systematics=systematics,
        output_suffix=clf.output_suffix,
        cuts=signal_region,
        output_formats=args.output_formats,
        unblind=True,
        ypadding=(0.3, 0))
    """

    ############################################################
    # show the MMC below a BDT score that unblinds 30% of signal
    # determine BDT score with 30% of 125 signal below:

    signal_score_hist = Hist(1000, -1, 1)
    for s, scores_dict in sig_scores:
        histogram_scores(signal_score_hist, scores_dict, inplace=True)
    max_score = efficiency_cut(signal_score_hist, 0.3)
    log.info("plotting mmc below BDT score of %.2f" % max_score)

    draw_channel_array(
        analysis,
        variables.VARIABLES,
        plots=[MMC_MASS],
        mass=125,
        mode='combined',
        signal_scale=50,
        category=category,
        region=region,
        systematics=systematics,
        clf=clf,
        max_score=max_score,
        output_suffix="_lowbdt" + clf.output_suffix,
        cuts=signal_region,
        output_formats=args.output_formats,
        unblind=True)
