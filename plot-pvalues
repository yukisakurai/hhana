#!/usr/bin/env python
# python imports
import pickle
import os
import logging
# ROOT/rootpy imports
import ROOT
from rootpy.plotting import Canvas, Legend, set_style
from rootpy.plotting.style.atlas.labels import ATLAS_label
# local imports
from mva import save_canvas
from mva.categories import CATEGORIES
from mva.categories.base import CategoryMeta
from statstools.plotting import pvalue_plot, parse_name, get_category

log = logging.getLogger(os.path.basename(__file__))
set_style('ATLAS', shape='rect')
gaus_cdf = ROOT.Math.gaussian_cdf_c


masses = range(100, 155, 5)
colors = ['black', 'red', 'blue', 'purple', 'darkgreen']
lines = ['dashed', 'solid', 'dotted', 'dashdot', 'longdash', 'verylongdash']


def get_sigs(path, category, year=None, meas=True, blind=True, profile='0'):
    log.info(category)
    log.info(year)
    if year is None:
        dir_pattern = 'hh_{0}_{{0}}'.format(category)
    else:
        dir_pattern = 'hh_{0}_{1}_{{0}}'.format(year, category)
    sigs = []
    for mass in masses:
        dirname = dir_pattern.format(mass)
        if blind:
            filename = '{1}{0}.pickle'.format(dirname, 'measurement_' if meas else '')
        else:
            filename = '{1}{0}_observed.pickle'.format(dirname, 'measurement_' if meas else '', profile)
        with open(os.path.join(path, dirname, filename), 'r') as pickle_file:
            sig_dict = pickle.load(pickle_file)
            sigs.append(sig_dict['combined'][0])
    return sigs


def plot(cat_name, cat_label, year, curves, labels):
    c = Canvas()
    log.info(labels)
    _, graphs = pvalue_plot(
        masses, curves, pad=c, xtitle='m_{H} [GeV]',
        linestyle=lines, linecolor=colors,
        yrange=(gaus_cdf(3.5), 10000))
    for label, graph in zip(labels, graphs):
        graph.title = label
        graph.legendstyle = 'L'
        log.info( '-------- {0} -------'.format(graph.title))
        log.info(['{0:1.1f}'.format(xval) for xval in list(graph.x())])
        log.info(['{0:0.3f}'.format(yval) for yval in list(graph.y())])

    leg = Legend(
        graphs,x=0.45, y=0.01,
        entrysep=0.001, textsize=17)
    leg.Draw()
    lat = ROOT.TLatex(c.GetLeftMargin()+0.02, 1-c.GetTopMargin()+0.015, cat_label)
    lat.SetNDC(True)
    lat.SetTextSize(20)
    lat.Draw()
    ATLAS_label(0.75, 0.88, text="Internal", sqrts=None, pad=c, sep=0.09)
    save_canvas(c, 'plots/pvalues', cat_name+'_'+str(year), formats=('.eps', '.png'))

if __name__ == '__main__':
    from rootpy.extern.argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument('--unblind', action='store_true', default=False)
    parser.add_argument('--year', default=12, choices=[11, 12], type=int)
    parser.add_argument('--categories', default='cuts', choices=['mva', 'cuts'])
    parser.add_argument('--category-break-plot', action='store_true', default=False)
    args = parser.parse_args()

    # This part need to be updated manually - TODO: implement automatisation
    #path = 'workspaces/14_08_2014/hh_nos_nonisol_ebz_cuts_fixed/'
    path = 'workspaces/paper_first_draft/hh_nos_nonisol_ebz_cuts_fixed/'
    categories = CATEGORIES['cuts']

    cat_names = []

    for dir in os.listdir(path):
        if os.path.isdir(os.path.join(path, dir)):
            year, cat_name, mass = parse_name('channel_'+dir)
            log.info('Year: {0}, Cat: {1}, Mass: {2}'.format(year, cat_name, mass))
            if not cat_name in cat_names:
                cat_names.append(cat_name)

    log.info(cat_names)
    pvalues_dict = {}
    for cat_name in cat_names:
        if cat_name=='cuts_vbf':
            continue
        elif cat_name=='cuts_boosted':
            continue
        exp = get_sigs(
            path, cat_name, year=args.year, 
            meas=True, blind=True)
        if args.unblind:
            obs = get_sigs(
                path, cat_name, year=args.year, 
                meas=True, blind=False)

        pvals_exp = map(gaus_cdf, exp)
        pvals_obs = map(gaus_cdf, obs)
        category = get_category(cat_name, categories)

        if isinstance(category, CategoryMeta):
            plot(category.name, category.label, args.year, [pvals_exp, pvals_obs], ['Expected', 'Observed'])
            pvalues_dict[category.name] = {'exp':pvals_exp, 'obs':pvals_obs}
        elif cat_name == 'combination':
            plot(cat_name, cat_name, args.year, [pvals_exp, pvals_obs], ['Expected', 'Observed'])
            pvalues_dict[cat_name] = {'exp':pvals_exp, 'obs':pvals_obs}

    if args.category_break_plot:
        pvalues = [pvalues_dict['combination']['exp'], pvalues_dict['combination']['obs']]
        labels = ['Expected', 'Observed']
        for cat in CATEGORIES[args.categories]:
            pvalues.append(pvalues_dict[cat.name]['exp'])
            labels.append('{0} Exp.'.format(cat.label))
        plot('combination_breakdown', '#tau_{had}#tau_{had} combination', args.year, pvalues, labels)

# # 8TeV combination
# bdt_combined_12 = map(gaus_cdf, get_sigs(bdt_path, 'combination', year=12))
# cut_combined_12 = map(gaus_cdf, get_sigs(cut_path, 'combination', year=12))
# plot('combination_12', [bdt_combined_12, cut_combined_12], ['MVA 8 TeV', 'CBA 8 TeV'])

