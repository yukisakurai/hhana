#!/usr/bin/env python
# python imports
import pickle
import os
import logging
# ROOT/rootpy imports
import ROOT
from rootpy.plotting import Canvas, Legend, set_style
from rootpy.plotting.style.atlas.labels import ATLAS_label
# local imports
from mva import save_canvas
from mva.categories import Category_VBF, Category_Boosted
from mva.categories.base import CategoryMeta
from statstools.plotting import pvalue_plot, parse_name, get_category

log = logging.getLogger(os.path.basename(__file__))
set_style('ATLAS', shape='rect')
gaus_cdf = ROOT.Math.gaussian_cdf_c


colors = ['black', 'red', 'blue', 'purple', 'darkgreen']
lines = ['dashed', 'solid', 'dotted', 'dashdot', 'longdash', 'verylongdash']


def get_sig(path, category):
    dirname = 'hh_12_{0}_125'.format(category.name)
    filename = '{1}{0}.pickle'.format(dirname, 'measurement_')
    with open(os.path.join(path, dirname, filename), 'r') as pickle_file:
        sig_dict = pickle.load(pickle_file)
        sig = sig_dict['combined'][0]
        return sig
    return -999


def plot(cat_name, cat_label, year, curves, labels):
    c = Canvas()
    log.info(labels)
    _, graphs = pvalue_plot(
        masses, curves, pad=c, xtitle='m_{H} [GeV]',
        linestyle=lines, linecolor=colors,
        yrange=(gaus_cdf(3.5), 50))
    for label, graph in zip(labels, graphs):
        graph.title = label
        graph.legendstyle = 'L'
        log.info( '-------- {0} -------'.format(graph.title))
        log.info(['{0:1.1f}'.format(xval) for xval in list(graph.x())])
        log.info(['{0:0.3f}'.format(yval) for yval in list(graph.y())])


    leg = Legend(graphs, 
                 margin=0.15,
                 textsize=20)
    leg.Draw()
    lat = ROOT.TLatex(c.GetLeftMargin()+0.02, 1-c.GetTopMargin()-0.05, cat_label)
    lat.SetNDC(True)
    lat.SetTextSize(20)
    lat.Draw()
    ATLAS_label(0.75, 0.88, text="Internal", sqrts=None, pad=c, sep=0.09)
    save_canvas(c, 'plots/pvalues', cat_name+'_'+str(year), formats=('.eps', '.png'))

if __name__ == '__main__':
    from rootpy.extern.argparse import ArgumentParser
    parser = ArgumentParser()
    args = parser.parse_args()

    # This part need to be updated manually - TODO: implement automatisation
    #path = 'workspaces/14_08_2014/hh_nos_nonisol_ebz_cuts_fixed/'
    path = 'workspaces/FakeAmplitude_TEST/'

    sigs = []
    for dir in os.listdir(path):
        if os.path.isdir(os.path.join(path, dir)):
            if 'rescale' in dir:
                scale_factor = dir.split('_')[-1]
                sigs.append( 
                    (scale_factor,
                     gaus_cdf(get_sig(os.path.join(path, dir), Category_VBF)),
                     gaus_cdf(get_sig(os.path.join(path, dir), Category_Boosted))))

    sigs = sorted(sigs)
    xval, vbf_sig, boosted_sig = zip(*sigs)
    log.info(xval)
    log.info(vbf_sig)
    log.info(boosted_sig)
    c = Canvas()
    _, graphs = pvalue_plot(
        xval, vbf_sig, 
        pad=c, xtitle='Fake NP Scaling Factor')
    
    labels = [Category_VBF.label, Category_Boosted.label]
    for label, graph in zip(labels, graphs):
        graph.title = label
        graph.legendstyle = 'L'
        log.info( '-------- {0} -------'.format(graph.title))
        log.info(['{0:1.1f}'.format(xval) for xval in list(graph.x())])
        log.info(['{0:0.3f}'.format(yval) for yval in list(graph.y())])


    # leg = Legend(graphs, 
    #              margin=0.15,
    #              textsize=20)
    # leg.Draw()
    # lat = ROOT.TLatex(c.GetLeftMargin()+0.02, 1-c.GetTopMargin()-0.05, cat_label)
    # lat.SetNDC(True)
    # lat.SetTextSize(20)
    # lat.Draw()
    # ATLAS_label(0.75, 0.88, text="Internal", sqrts=None, pad=c, sep=0.09)
    # save_canvas(c, 'plots/pvalues', cat_name+'_'+str(year), formats=('.eps', '.png'))
