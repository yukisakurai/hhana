#!/usr/bin/env python
# python imports
import os
# rootpy/ROOT imports
from rootpy.extern.argparse import ArgumentParser
from rootpy.utils.path import mkdir_p

from ROOT import TLatex

# local imports
from mva.samples import (
    Data, QCD, Embedded_Ztautau, MC_Ztautau,
    Pythia_Ztautau, MC_Embedded_Ztautau, Higgs)
from mva.categories import CATEGORIES, Category_Preselection
from mva.variables import VARIABLES
from mva.analysis import Analysis
from mva.plotting.templates import RatioPlot
from mva.systematics import iter_systematics
from mva import save_canvas, log
from mva.defaults import TARGET_REGION
from mva.plotting.compare import compare as plotting_compare

parser = ArgumentParser()
parser.add_argument('--year', type=int, default=2012, choices=(2011, 2012))
parser.add_argument('--output-formats', default=['png'], nargs='+',
                    choices=('png', 'eps', 'pdf'),
                    help='output formats')
parser.add_argument('--categories', default='mva_all',
                    choices=CATEGORIES.keys(),
                    help='category definitions')
parser.add_argument('shapes', nargs='*')
args = parser.parse_args()

categories = CATEGORIES[args.categories]+[Category_Preselection]

# list of fields to plot
fields = [
    'mmc1_mass',
    'MET_et',
    'MET_centrality',
    'resonance_pt',
    'dEta_tau1_tau2',
    'dR_tau1_tau2',
    'dPhi_tau1_tau2',
    'tau1_pt',
    'tau2_pt',
    'tau1_eta',
    'tau2_eta',
    'numJets',
    'tau1_numTrack',
    'tau2_numTrack',
]
field_dict = dict([(field, VARIABLES[field]) for field in fields])


def compare(a, b, category, name, **kwargs):
    return plotting_compare(a, b, field_dict,
                            category, name, args.year,
                            **kwargs)


if not args.shapes or 'data' in args.shapes:
    # data
    data = Data(year=args.year, label='TES-shifted Data')
    data_orig = Data(year=args.year, tes_shift=False, label='Original Data')
    for category in categories:
        # compare tes-shifted data with original data
        compare(data, data_orig, category, 'data_tes')


if not args.shapes or 'ztt' in args.shapes:
    # ztt
    ztt_eb = Embedded_Ztautau(year=args.year, label='Embedded Data')
    ztt_mc = MC_Ztautau(year=args.year, label='MC')
    
    # compare with and without spin weight
    ztt_eb_spin = Embedded_Ztautau(year=args.year, label='TauSpinner')
    ztt_eb_nospin = Embedded_Ztautau(year=args.year, label='No TauSpinner', embedding_spin_weight=False)

    # compare with and without posterior trigger correction
    ztt_eb_correct = Embedded_Ztautau(year=args.year, label='Corrected')
    ztt_eb_nocorrect = Embedded_Ztautau(year=args.year, label='Uncorrected', posterior_trigger_correction=False)

    # compare 2011 with 2012 embedding
    #ztt_eb_11 = Embedded_Ztautau(year=2011, label='7 TeV Embedding')
    #ztt_eb_12 = Embedded_Ztautau(year=2012, label='8 TeV Embedding')

    # MC Ztt and MC embedded Ztt
    #ztt_pyth = Pythia_Ztautau(year=2012, label='MC')
    #ztt_mceb = MC_Embedded_Ztautau(year=2012, label='Embedded MC')
    
    for category in categories:
        # compare Ztt shapes
        compare(ztt_eb, ztt_mc, category, 'ztt')
        # compare with and without tau spinner weight
        compare(ztt_eb_spin, ztt_eb_nospin, category, 'ztt_spin')
        # compare with and without posterior trigger correction
        compare(ztt_eb_correct, ztt_eb_nocorrect, category, 'ztt_posterior_correct')
        # compare MC Ztautau with embedded MC Zmumu
        #compare(ztt_pyth, ztt_mceb, category, 'ebztt')
        # compare 7 TeV with 8 TeV embedding
        #compare(ztt_eb_12, ztt_eb_11, category, 'ztt_7_v_8')


if not args.shapes or 'qcd' in args.shapes:
    # fakes
    qcd_nos = Analysis(args.year, fakes_region='nOS').normalize(Category_Preselection).qcd.decorate(label='Isolated nOS Fakes')
    qcd_nos_nonisol = Analysis(args.year, fakes_region='nOS_NONISOL').normalize(Category_Preselection).qcd.decorate(label='Non-isolated nOS Fakes')

    qcd_ss = Analysis(args.year, fakes_region='SS').normalize(Category_Preselection).qcd.decorate(label='Isolated SS Fakes')
    # to get OS fakes, use "best" Ztt fits from nOS_NONISOL and then change the
    # shape region to OS and scale to 1.
    qcd_os = Analysis(args.year, fakes_region='nOS_NONISOL').normalize(Category_Preselection).qcd.decorate(label='Isolated OS Fakes')
    qcd_os.shape_region = 'OS'
    qcd_os.scale = 1.

    qcd_ss_nonisol = Analysis(args.year, fakes_region='SS_NONISOL').normalize(Category_Preselection).qcd.decorate(label='Non-isolated SS Fakes')
    qcd_os_nonisol = Analysis(args.year, fakes_region='OS_NONISOL').normalize(Category_Preselection).qcd.decorate(label='Non-isolated OS Fakes')

    qcd_nonisol = Analysis(args.year, fakes_region='NONISOL').normalize(Category_Preselection).qcd.decorate(label='Non-isolated Fakes')


    for category in categories:
        # compare SS and nOS QCD shapes
        compare(qcd_nos, qcd_ss, category, 'qcd_ss_v_nos')

        # compare SS ISOL and SS NONISOL QCD shapes
        compare(qcd_ss, qcd_ss_nonisol, category, 'qcd_ss')
        # compare OS ISOL and OS NONISOL QCD shapes
        compare(qcd_os, qcd_os_nonisol, category, 'qcd_os')
        # compare nOS ISOL and nOS NONISOL QCD shapes
        compare(qcd_nos, qcd_nos_nonisol, category, 'qcd_nos')

        # compare SS NONISOL and OS NONISOL QCD shapes
        compare(qcd_ss_nonisol, qcd_os_nonisol, category, 'qcd_ss_v_os_nonisol')
        # compare SS ISOL and OS ISOL QCD shapes
        compare(qcd_ss, qcd_os, category, 'qcd_ss_v_os_isol')

        # compare nOS NONISOL and OS NONISOL QCD shapes
        compare(qcd_nos_nonisol, qcd_os_nonisol, category, 'qcd_nos_v_os_nonisol')
        # compare nOS ISOL and OS ISOL QCD shapes
        compare(qcd_nos, qcd_os, category, 'qcd_nos_v_os_isol')
        # compare nOS NONISOL and OS ISOL QCD shapes
        compare(qcd_nos_nonisol, qcd_os, category, 'qcd_nos_nonisol_v_os_isol')
        # compare NONISOL and OS ISOL QCD shapes
        compare(qcd_nonisol, qcd_os, category, 'qcd_nonisol_v_os_isol')

        # compare nOS NONISOL and NONISOL (no charge requirement)
        compare(qcd_nos_nonisol, qcd_nonisol, category, 'qcd_nonisol')


if not args.shapes or 'qcd_ztautau' in args.shapes:
    ztt_eb = Embedded_Ztautau(year=args.year, label='Z#rightarrow#tau#tau')
    qcd = Analysis(args.year, fakes_region='nOS_NONISOL').normalize(Category_Preselection).qcd.decorate(label='Fakes')
    higgs = Higgs(args.year, mass=125)
    for category in categories:
        compare(ztt_eb, qcd, category, 'qcd_vs_ztautau')
        compare(ztt_eb, higgs, category, 'higgs_vs_ztautau')

if not args.shapes or 'ztautau_isolation' in args.shapes:
    ztt = MC_Ztautau(year=args.year, label='Z#rightarrow#tau#tau')
    ztt_isol = MC_Ztautau(year=args.year, label='Isolated Z#rightarrow#tau#tau')
    for category in categories:
        compare(ztt, ztt_isol, category, 'ztautau_isolation',
                region_a='OS',
                region_b='OS_ISOL')

if not args.shapes or 'emb_ztautau_isolation' in args.shapes:
    ztt = Embedded_Ztautau(year=args.year, label='Z#rightarrow#tau#tau')
    ztt_isol = Embedded_Ztautau(year=args.year, label='Isolated Z#rightarrow#tau#tau')
    for category in categories:
        compare(ztt, ztt_isol, category, 'emb_ztautau_isolation',
                region_a='OS',
                region_b='OS_ISOL')

if not args.shapes or 'higgs_isolation' in args.shapes:
    htt = Higgs(year=args.year, mass=125, label='H(125)#rightarrow#tau#tau')
    htt_isol = Higgs(year=args.year, mass=125, label='Isolated H(125)#rightarrow#tau#tau')
    for category in categories:
        compare(htt, htt_isol, category, 'higgs_isolation',
                region_a='OS',
                region_b='OS_ISOL')

if not args.shapes or 'data_isolation' in args.shapes:
    htt = Data(year=args.year, label='Data')
    htt_isol = Data(year=args.year, label='Isolated Data')
    for category in categories:
        compare(htt, htt_isol, category, 'data_isolation',
                region_a='OS',
                region_b='OS_ISOL')
