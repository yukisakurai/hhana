#!/usr/bin/env python

from rootpy.extern.argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument('--max-trees', type=int, default=200)
parser.add_argument('--min-trees', type=int, default=1)
parser.add_argument('--learning-rate', type=float, default=0.1)
parser.add_argument('--max-fraction', type=float, default=0.3)
parser.add_argument('--min-fraction', type=float, default=0.001)
parser.add_argument('--min-fraction-steps', type=int, default=100)
parser.add_argument('--nfold', type=int, default=10,
    help='the number of folds in the cross-validation')
parser.add_argument('--masses', nargs='+', default=['125',])
parser.add_argument('--suffix', default=None)
parser.add_argument('--procs', type=int, default=-1)
parser.add_argument('--dry-run', default=False, action='store_true')
parser.add_argument('category', choices=('vbf', 'boosted'))
args = parser.parse_args()

from mva.categories import Category_VBF, Category_Boosted
from mva.analysis import Analysis
from mva.samples import Higgs
from mva.defaults import TRAIN_FAKES_REGION

if args.masses == ['all',]:
    args.masses = Higgs.MASSES[:]
    masses_label = 'all'
else:
    args.masses = map(int, args.masses)
    args.masses.sort()
    masses_label = '_'.join(map(str, args.masses))

if args.category == 'vbf':
    category = Category_VBF
else:
    category = Category_Boosted

analysis = Analysis(
    year=2012,
    systematics=False,
    fakes_region=TRAIN_FAKES_REGION,
    suffix=args.suffix)
analysis.normalize(category)

# combine embedded and MC Ztt for training
# TODO: account for the fact that N(MC) != N(EMB)
#analysis_eb = get_analysis(args, embedding=True)
#analysis_mc = get_analysis(args, embedding=False)
#analysis_eb.normalize(category)
#analysis_mc.normalize(category)
#analysis_eb.ztautau.scale *= 0.5
#analysis_mc.ztautau.scale *= 0.5
#backgrounds_train = [
#    analysis_eb.ztautau,
#    analysis_mc.ztautau,
#    analysis.others,
#    analysis.qcd,
#]

backgrounds_train = analysis.backgrounds

signals_train = [
    Higgs(year=2012,
          masses=args.masses,
          modes=category.train_signal_modes),
    ]

clf = analysis.get_clf(category, load=False, mass=masses_label)
clf.train(signals=signals_train,
          backgrounds=backgrounds_train,
          remove_negative_weights=True,
          max_trees=args.max_trees,
          min_trees=args.min_trees,
          learning_rate=args.learning_rate,
          max_fraction=args.max_fraction,
          min_fraction=args.min_fraction,
          min_fraction_steps=args.min_fraction_steps,
          cv_nfold=args.nfold,
          n_jobs=args.procs,
          dry_run=args.dry_run)
